*Practica 2 de Algoritmos* 

Daniela Cisneros: d.cisneross.
Alexander Hermida Pazos: alexander.hermida.
Santiago Rey Garcia: santiago.rey2.
 
La finalidad de esta practica consiste en ordenar de manera ascendente vectores de n numeros enteros con los algoritmos de ordenacion por seleccion y ordenacion shell. 

El ordenador con el que hemos realizado las mediciones tiene las siguientes caracteristicas: 

-S.O: linuxMint Cinamon. 
-Version: Ubuntu 20.04.3 LTS.
-Equipo: Ryzen 3600X 6 cores 12 hilos.
-Memoria RAM: 32 GiB.

La unidad de tiempo que estamos utilizando son microsegundos; los vectores siguen una progresion geometrica de razon dos. 

Tiempos Shell:   

Ascendente:

*   2000        65.218000    0.032609      0.012901      0.001559
*   4000       140.704000    0.035176      0.012788      0.001275
*   8000       298.103000    0.037263      0.012448      0.001023
   16000       627.000000    0.039188      0.012029      0.000816
   32000      1336.000000    0.041750      0.011777      0.000659
   64000      2881.000000    0.045016      0.011668      0.000538
  128000      6446.000000    0.050359      0.011995      0.000456
  256000     14290.000000    0.055820      0.012218      0.000383

*: tiempo promedio de k=1000 ejecuciones del algoritmo.
Cota subestimada = n^1
Cota ajustada = n^.1.122 Constante: 0.012 
Cota sobrestimada = n^1.4  

Descendente:

*   2000        94.390000    0.047195      0.019248      0.002257
*   4000       208.566000    0.052142      0.019595      0.001890
*   8000       453.759000    0.056720      0.019641      0.001558
   16000       951.000000    0.059437      0.018966      0.001237
   32000      2059.000000    0.064344      0.018919      0.001015
   64000      4381.000000    0.068453      0.018547      0.000818
  128000      9470.000000    0.073984      0.018471      0.000670
  256000     20428.000000    0.079797      0.018358      0.000548

*: tiempo promedio de k=1000 ejecuciones del algoritmo.
Cota subestimada = n^1
Cota ajustada = n^1.118. Constante: 0.018  
Cota sobrestimada = n^1.4  

Aleatorio:

*    500        42.784000    0.085568      0.024690      0.007124
*   1000        98.839000    0.098839      0.024827      0.006236
*   2000       225.346000    0.112673      0.024638      0.005388
    4000       524.000000    0.131000      0.024938      0.004747
    8000      1168.000000    0.146000      0.024196      0.004010
   16000      2672.000000    0.167000      0.024093      0.003476
   32000      6144.000000    0.192000      0.024114      0.003029
   64000     13836.000000    0.216188      0.023637      0.002584

*: tiempo promedio de k=1000 ejecuciones del algoritmo.
Cota subestimada = n^1
Cota ajustada = n^1.2. Constante: 0.024
Cota sobrestimada = n^1.4   


Tiempos Selecci√≥n: 

Ascendente:

*    500       235.959000    0.011337       0.000944       0.000272
    1000       918.000000    0.014549       0.000918       0.000231
    2000      3658.000000    0.019125       0.000914       0.000200
    4000     14637.000000    0.025244       0.000915       0.000174
    8000     58456.000000    0.033257       0.000913       0.000151
   16000    234780.000000    0.044062       0.000917       0.000132
   32000    937163.000000    0.058020       0.000915       0.000115
   64000   3751263.000000    0.076611       0.000916       0.000100

*: tiempo promedio de k=1000 ejecuciones del algoritmo.
Cota subestimada = n^1.6
Cota ajustada = n^2. Constante: 0.00092
Cota sobrestimada = n^2.2

Descendente:

*    500       264.850000    0.006835       0.001059       0.000306
    1000      1065.000000    0.008460       0.001065       0.000268
    2000      4225.000000    0.010329       0.001056       0.000231
    4000     16812.000000    0.012651       0.001051       0.000200
    8000     66636.000000    0.015433       0.001041       0.000173
   16000    265507.000000    0.018927       0.001037       0.000150
   32000   1061441.000000    0.023288       0.001037       0.000130
   64000   4250294.000000    0.028702       0.001038       0.000113

*: tiempo promedio de k=1000 ejecuciones del algoritmo.
Cota subestimada = n^1.7
Cota ajustada = n^2 Constante: 0.0010
Cota sobrestimada = n^2.2   

Aleatorio:

*    500       255.658000    0.006598       0.001088       0.000295
    1000       963.000000    0.007649       0.001032       0.000242
    2000      3783.000000    0.009249       0.001020       0.000207
    4000     15146.000000    0.011397       0.001028       0.000180
    8000     59394.000000    0.013756       0.001015       0.000154
   16000    235645.000000    0.016798       0.001014       0.000133
   32000    937529.000000    0.020570       0.001016       0.000115
   64000   3743697.000000    0.025281       0.001021       0.000100

*: tiempo promedio de k=1000 ejecuciones del algoritmo.
Cota subestimada = n^1.7
Cota ajustada = n^1.99. Constante: 0.0010
Cota sobrestimada = n^2.2


En las medidas de tiempos menores de 500 micras imprime un asterisco como podemos observar anteriormente. Una vez dentro del bucle 
que se ejecuta en dichas medidas inicializamos k = 1000. 

Concluimos con la realizacion de este trabajo que en todos los casos el algoritmo de ordenacion por Shell es mas rapido que el algoritmo de seleccion. 

En cuanto a complejidades en el algoritmo de Shell tenemos que la teorica en el peor caso es n^2, con esta implementacion demostramos empiricamente que mejora a n^7/6 aproximadamente para los casos medios. El peor caso es el aleatorio ya que nos da un tiempo muy superior al obtenido en descendiente y ascendente siendo este ultimo el mejor caso.

Por otro lado en ordenacion por seleccion en todos los casos tenemos la misma complejidad empirica que cuadra con la teorica y podemos comprobar que aun asi siendo los tiempos de orden descendente son superiores a los tiempos del aleatorio y al del ascendente, siendo estos ultimos relativamente iguales. 
